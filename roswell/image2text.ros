#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -L sbcl-bin -m image2text -- $0 "$@"
|#
(progn ;;init forms
  (setf *load-verbose* nil *load-print* nil
        *compile-verbose* nil *compile-print* nil)
  (ros:ensure-asdf)
  #+quicklisp(ql:quickload '(:alexandria :bordeaux-threads 
                             :cl-cpus :opticl :unix-opts) :silent t)
  (asdf:load-system :cl-image2text))

(defpackage #:ros.script.cl-image2text
  (:use #:cl))
(in-package #:ros.script.cl-image2text)

(unix-opts:define-opts
  (:name :help
   :description "show usage help"
   :short #\h :long "help")
  (:name :version
   :description "show version"
   :short #\v :long "version")
  (:name :x-size
   :description "width of output text"
   :short #\x :long "cols"
   :arg-parser #'parse-integer :meta-var "WIDTH")
  (:name :y-size
   :description "height of output text"
   :short #\y :long "rows"
   :arg-parser #'parse-integer :meta-var "HEIGHT")
  (:name :format
   :description "type of input image"
   :short #\f :long "format"
   :arg-parser (lambda (name) (intern name :keyword)) :meta-var "FORMAT"))

(defvar *version* 
  (with-open-file 
    (stream (merge-pathnames #P"version.sexp" 
                             (asdf:system-source-directory :cl-image2text))
            :if-does-not-exist nil)
    (when stream (read stream nil))))

(defun version-string ()
  (format nil "cl-image2text ~A~%(C) Ivan Podmazov" 
          (if *version* *version* "")))

(defun show-version ()
  (format t "~A~%" (version-string)))

(defun show-help (&optional prefix stream)
  (unix-opts:describe 
    :prefix (if prefix prefix (version-string)) 
    :usage-of "image2text" :args "[FILE]"
    :suffix 
    (format nil "~A~%~A~%~%~A~%~{~A~^, ~}" 
            "If FILE is omitted, image is read from the standard input."
            "In this case, --format option is mandatory."
            "Supported image formats:"
            (mapcar #'symbol-name (alexandria:hash-table-keys
                                    opticl::*image-stream-reader-hash-table*)))
    :stream (if stream stream *standard-output*)))

(defun arg-parse-error (msg)
  (show-help (format nil "Arguments parsing error: ~A." msg) *error-output*)
  1)

(defun main (&rest argv)
  (multiple-value-bind (options free-args) 
      (handler-case (unix-opts:get-opts argv)
        (t (msg) (return-from main (arg-parse-error msg))))
    (let ((x (getf options :x-size)) (y (getf options :y-size))
          (fmt (getf options :format)))
      (cond
        ((getf options :help) (show-help))
        ((getf options :version) (show-version))
        ((rest free-args) 
         (arg-parse-error "too many arguments supplied"))
        ((and (or (null free-args) (string= (first free-args) "")) (null fmt))
         (arg-parse-error "no image format specified for the standard input"))
        ((or (and x (<= x 0)) (and y (<= y 0)))
         (arg-parse-error "text width and height must be positive"))
        (t (handler-case 
               (cl-image2text:write-text 
                 (cl-image2text:convert-image-to-text 
                   (cl-image2text:read-image 
                     (first free-args) 
                     :x (when x (* cl-image2text:+horz-ppc+ x)) 
                     :y (when y (* cl-image2text:+vert-ppc+ y)) 
                     :format fmt)))
             (t (msg) (format *error-output* "~A~%" msg) 1)))))))

;;; vim: set ft=lisp lisp:
